// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	context "context"
	database "go-cicd/app/database"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// TransactionClient is an autogenerated mock type for the TransactionClient type
type TransactionClient struct {
	mock.Mock
}

// Database provides a mock function with given fields: name, opts
func (_m *TransactionClient) Database(name string, opts ...*options.DatabaseOptions) database.Database {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 database.Database
	if rf, ok := ret.Get(0).(func(string, ...*options.DatabaseOptions) database.Database); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Database)
		}
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *TransactionClient) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseSession provides a mock function with given fields: ctx, fn
func (_m *TransactionClient) UseSession(ctx context.Context, fn func(database.SessionContext) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(database.SessionContext) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
